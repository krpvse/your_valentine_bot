import os

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

from config import bot, bot_name, db
from .states import ProfileStatesGroup
from messages import *
from keyboards import *
from utils.validators import validate_name, validate_description


async def change_profile(callback: types.CallbackQuery):
    await callback.message.answer(text='<b>üîπ–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è</b>', reply_markup=cancel_profile_changing_ikb)
    await ProfileStatesGroup.name.set()


async def save_name(message: types.Message, state: FSMContext):
    is_correct_name = await validate_name(message.text)
    if is_correct_name:
        async with state.proxy() as data:
            data['name'] = message.text
        await message.answer(text='<b>üîπ–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è</b>', reply_markup=cancel_profile_changing_ikb)
        await ProfileStatesGroup.next()
    else:
        await message.answer(text='<b>üòí –í —Ç–≤–æ–µ–º –∏–º–µ–Ω–∏ –Ω–µ—Ç –±—É–∫–≤?</b>\n\n –ù–∞–ø–∏—à–∏ –∏–º—è —Å –±—É–∫–≤–∞–º–∏',
                             reply_markup=cancel_profile_changing_ikb)


async def save_description(message: types.Message, state: FSMContext):
    is_correct_description, sign_qty = await validate_description(message.text)
    if is_correct_description:
        async with state.proxy() as data:
            data['description'] = message.text
        await message.answer(text='<b>üîπ–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ</b>', reply_markup=cancel_profile_changing_ikb)
        await ProfileStatesGroup.next()
    else:
        await message.answer(text=f' <b>üòí –û–≥–æ –∫–∞–∫ –º–Ω–æ–≥–æ –±—É–∫–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏</b>\n\n'
                                  f'–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 512 —Å–∏–º–≤–æ–ª–æ–≤. –£ —Ç–µ–±—è: {sign_qty}. –°–æ–∫—Ä–∞—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞',
                             reply_markup=cancel_profile_changing_ikb)


async def save_photo(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    if photo:
        if not os.path.exists(f'media/id{message.from_user.id}'):
            os.mkdir(f'media/id{message.from_user.id}')
        await photo.download(f'media/id{message.from_user.id}/avatar{message.from_user.id}.png')

        async with state.proxy() as data:
            name = data['name']
            description = data['description']
            db.change_profile(user_id=message.from_user.id, name=name, description=description)

        profile_img = types.InputFile(f'media/id{message.from_user.id}/avatar{message.from_user.id}.png')
        await bot.send_photo(message.from_user.id, photo=profile_img)
        await bot.send_message(chat_id=message.from_user.id,
                               text=await get_profile_msg(name, description),
                               reply_markup=profile_ikb)
        await state.finish()

    else:
        await message.answer('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –û—Ç–ø—Ä–∞–≤—å —Å–Ω–æ–≤–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞', reply_markup=cancel_profile_changing_ikb)


async def cancel_profile_changes(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()

    profile = db.get_profile(callback.from_user.id)

    # IF IT IS FIRST START THEN SHOULD TO WRITE PROFILE DATA
    if profile[3]:
        name = profile[3]
        description = profile[4]

        await callback.answer('–û—Ç–º–µ–Ω–∏–ª–∏')
        profile_img = types.InputFile(f'media/id{callback.from_user.id}/avatar{callback.from_user.id}.png')
        await bot.send_photo(callback.from_user.id, photo=profile_img)
        await bot.send_message(chat_id=callback.from_user.id,
                               text=await get_profile_msg(name, description),
                               reply_markup=profile_ikb)
    else:
        await callback.message.answer('–û—Ç–º–µ–Ω–∏–ª–∏', reply_markup=first_start_ikb)


async def get_link(callback: types.CallbackQuery):
    profile_id = callback.from_user.id
    profile = db.get_profile(profile_id)

    # IF IT IS FIRST START THEN SHOULD TO WRITE PROFILE DATA
    if not profile[3]:
        await bot.send_message(chat_id=callback.from_user.id,
                               text='–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É, –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ. –ê –µ—â—ë –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ. '
                                    '–õ—é–¥–∏ –¥–æ–ª–∂–Ω—ã –∑–Ω–∞—Ç—å, –∫–æ–º—É –æ—Å—Ç–∞–≤–ª—è—é—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É!')
        await callback.message.answer(text='<b>üîπ–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è</b>', reply_markup=cancel_profile_changing_ikb)
        await ProfileStatesGroup.name.set()
    else:
        url = f'https://t.me/{bot_name}?start=profile{callback.from_user.id}'
        await bot.send_message(chat_id=callback.from_user.id,
                               text=await get_link_msg(url),
                               reply_markup=profile_ikb,
                               disable_web_page_preview=True)


async def get_valentine_cards(callback: types.CallbackQuery):
    valentine_cards = db.get_valentine_cards(callback.from_user.id)

    if valentine_cards:
        await callback.message.answer(text=f'üéâ –£ —Ç–µ–±—è —É–∂–µ {len(valentine_cards)} –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫!')
        for n, card in enumerate(valentine_cards):
            if n == len(valentine_cards)-1:
                await callback.message.answer(text=f'---{n + 1}\n<i>{card[0]}</i>', reply_markup=profile_ikb)
            else:
                await callback.message.answer(text=f'---{n+1}\n<i>{card[0]}</i>')
    else:
        await callback.message.answer('–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫. –ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã –ª—é–¥–∏ –∑–Ω–∞–ª–∏',
                                      reply_markup=profile_ikb)


# ------------------------------------- REGISTER HANDLERS

def register_profile_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(callback=get_link, text=['link'])
    dp.register_callback_query_handler(callback=get_valentine_cards, text=['valentine_cards'])

    dp.register_callback_query_handler(callback=change_profile, text=['change_profile'])
    dp.register_message_handler(callback=save_name, state=ProfileStatesGroup.name)
    dp.register_message_handler(callback=save_description, state=ProfileStatesGroup.description)
    dp.register_message_handler(callback=save_photo, content_types=['photo'], state=ProfileStatesGroup.photo)
    dp.register_callback_query_handler(callback=cancel_profile_changes,
                                       state=ProfileStatesGroup.name,
                                       text=['cancel_profile_changing'])
    dp.register_callback_query_handler(callback=cancel_profile_changes,
                                       state=ProfileStatesGroup.description,
                                       text=['cancel_profile_changing'])
    dp.register_callback_query_handler(callback=cancel_profile_changes,
                                       state=ProfileStatesGroup.photo,
                                       text=['cancel_profile_changing'])
